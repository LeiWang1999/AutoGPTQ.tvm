[2023-05-03 06:33:02] PRINT <class 'tvm.ir.module.IRModule'>
[2023-05-03 06:33:02] PRINT # from tvm.script import ir as I
[2023-05-03 06:33:02] PRINT # from tvm.script import tir as T
[2023-05-03 06:33:02] PRINT 
[2023-05-03 06:33:02] PRINT @I.ir_module
[2023-05-03 06:33:02] PRINT class Module:
[2023-05-03 06:33:02] PRINT     @T.prim_func
[2023-05-03 06:33:02] PRINT     def main(A: T.Buffer((16384, 16384), "float16"), B: T.Buffer((16384, 8192), "int8"), C: T.Buffer((16384, 16384), "float16")):
[2023-05-03 06:33:02] PRINT         T.func_attr({"global_symbol": "main", "tir.noalias": True})
[2023-05-03 06:33:02] PRINT         # with T.block("root"):
[2023-05-03 06:33:02] PRINT         B_decompress = T.alloc_buffer((16384, 16384), "float16")
[2023-05-03 06:33:02] PRINT         for i, j in T.grid(16384, 16384):
[2023-05-03 06:33:02] PRINT             with T.block("B_decompress"):
[2023-05-03 06:33:02] PRINT                 vi, vj = T.axis.remap("SS", [i, j])
[2023-05-03 06:33:02] PRINT                 T.reads(B[vi, vj // 2:vj // 2 + 2])
[2023-05-03 06:33:02] PRINT                 T.writes(B_decompress[vi, vj])
[2023-05-03 06:33:02] PRINT                 B_decompress[vi, vj] = T.Select(vj % 32 * 4 % 8 <= 5, T.Cast("float16", T.bitwise_and(T.shift_right(T.Cast("int32", B[vi, vj // 32 * 16 + vj % 32 * 4 // 8]), vj % 32 * 4 % 8), 15)), T.Cast("float16", T.bitwise_or(T.Cast("int8", T.bitwise_and(T.shift_right(T.Cast("int32", B[vi, vj // 32 * 16 + vj % 32 * 4 // 8]), vj % 32 * 4 % 8), T.shift_left(1, 8 - vj % 32 * 4 % 8) - 1)), T.Cast("int8", T.bitwise_and(T.bitwise_and(T.shift_left(T.Cast("int32", B[vi, vj // 32 * 16 + vj % 32 * 4 // 8 + 1]), 8 - vj % 32 * 4 % 8), T.shift_left(15, 8 - vj % 32 * 4 % 8)), 15)))))
[2023-05-03 06:33:02] PRINT         for i, j, k in T.grid(16384, 16384, 16384):
[2023-05-03 06:33:02] PRINT             with T.block("B"):
[2023-05-03 06:33:02] PRINT                 vi, vj, vk = T.axis.remap("SSR", [i, j, k])
[2023-05-03 06:33:02] PRINT                 T.reads(A[vi, vk], B_decompress[vj, vk])
[2023-05-03 06:33:02] PRINT                 T.writes(C[vi, vj])
[2023-05-03 06:33:02] PRINT                 with T.init():
[2023-05-03 06:33:02] PRINT                     C[vi, vj] = T.float16(0)
[2023-05-03 06:33:02] PRINT                 C[vi, vj] = C[vi, vj] + A[vi, vk] * B_decompress[vj, vk]
